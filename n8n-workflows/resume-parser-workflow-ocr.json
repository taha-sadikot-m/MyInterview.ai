{
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "parse-resume",
        "responseMode": "responseNode",
        "options": {
          "allowedOrigins": "*",
          "responseHeaders": {
            "entries": [
              {
                "name": "Access-Control-Allow-Origin",
                "value": "*"
              },
              {
                "name": "Access-Control-Allow-Methods",
                "value": "POST, OPTIONS"
              },
              {
                "name": "Access-Control-Allow-Headers",
                "value": "Content-Type"
              }
            ]
          }
        }
      },
      "id": "ab460d4f-9876-4ffc-91c8-a4c8c267df05",
      "name": "Resume Parser Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -1888,
        128
      ],
      "webhookId": "1cf554c6-ea8b-4f39-a6eb-e32553867ba3"
    },
    {
      "parameters": {
        "jsCode": "// Validate incoming data\nconst webhookData = $input.first().json;\n\nconsole.log('Webhook received data:', JSON.stringify(webhookData, null, 2));\n\n// Extract data from body (N8N webhook structure)\nconst requestData = webhookData.body || webhookData;\nconsole.log('Request data:', JSON.stringify(requestData, null, 2));\n\n// Check if resume_id exists and is not empty\nif (!requestData.resume_id || requestData.resume_id.trim() === '') {\n  throw new Error('Resume ID is required and cannot be empty');\n}\n\n// Validate UUID format (basic check)\nconst uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;\nif (!uuidRegex.test(requestData.resume_id)) {\n  throw new Error('Resume ID must be a valid UUID');\n}\n\nreturn [{\n  json: {\n    resume_id: requestData.resume_id,\n    user_id: requestData.user_id || 'unknown',\n    validated: true\n  }\n}];"
      },
      "id": "validate-input",
      "name": "Validate Input",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1680,
        128
      ]
    },
    {
      "parameters": {
        "method": "PATCH",
        "url": "=https://sahcdkgvmvjzvvuzyilp.supabase.co/rest/v1/resumes?id=eq.{{ $json.resume_id }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "apikey",
              "value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InNhaGNka2d2bXZqenZ2dXp5aWxwIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTc0NTE0MDQsImV4cCI6MjA3MzAyNzQwNH0.qqnJLTmd5a0JKUhfW8fm5W9cuN_lK3czdvnszJxdrWA"
            },
            {
              "name": "Authorization",
              "value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InNhaGNka2d2bXZqenZ2dXp5aWxwIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1NzQ1MTQwNCwiZXhwIjoyMDczMDI3NDA0fQ.hjqmoB1gGYoULNGPjEe5i988iUoeQkkxPNq1FFL5Ljk"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "Prefer",
              "value": "return=representation"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"parsing_status\": \"processing\",\n  \"updated_at\": \"{{ new Date().toISOString() }}\"\n}",
        "options": {}
      },
      "id": "2e9566d5-4fb4-4d50-89c6-c181c2f983fd",
      "name": "Update Resume Status",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -1456,
        128
      ]
    },
    {
      "parameters": {
        "url": "https://api.ocr.space/parse/image",
        "method": "POST",
        "sendBodyType": "formData",
        "formData": {
          "parameters": [
            {
              "name": "apikey",
              "value": "K89456578088957"
            },
            {
              "name": "base64Image",
              "value": "=data:application/pdf;base64,{{ $json[0].file_base64 }}"
            },
            {
              "name": "language",
              "value": "eng"
            },
            {
              "name": "isOverlayRequired",
              "value": "true"
            },
            {
              "name": "filetype",
              "value": "PDF"
            },
            {
              "name": "OCREngine",
              "value": "2"
            }
          ]
        },
        "options": {}
      },
      "id": "ocr-extraction",
      "name": "OCR.space",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        -1232,
        128
      ],
      "credentials": {}
    },
    {
      "parameters": {
        "jsCode": "// Process OCR.space API response and extract text\nconst ocrResponse = $input.first().json;\n\n// Get the database record from the Update Resume Status node\nconst dbRecord = $('Update Resume Status').first().json[0];\n\nconsole.log('OCR Response:', JSON.stringify(ocrResponse, null, 2));\nconsole.log('Database Record:', JSON.stringify(dbRecord, null, 2));\n\n// Check for OCR errors\nif (ocrResponse.IsErroredOnProcessing) {\n  throw new Error('OCR Error: ' + (ocrResponse.ErrorMessage || 'Unknown OCR error'));\n}\n\n// Extract text from all pages\nlet extractedText = '';\nif (ocrResponse.ParsedResults && Array.isArray(ocrResponse.ParsedResults)) {\n  ocrResponse.ParsedResults.forEach((parsedPage, index) => {\n    if (parsedPage.ParsedText) {\n      extractedText += `Page ${index + 1}:\\n${parsedPage.ParsedText}\\n\\n`;\n    }\n  });\n} else {\n  throw new Error('No ParsedResults found in OCR response');\n}\n\nif (!extractedText.trim()) {\n  throw new Error('No text could be extracted from the PDF');\n}\n\nconsole.log('Extracted text length:', extractedText.length);\nconsole.log('First 200 chars:', extractedText.substring(0, 200));\n\nreturn [\n  {\n    json: {\n      extracted_text: extractedText.trim(),\n      page_count: ocrResponse.ParsedResults ? ocrResponse.ParsedResults.length : 1,\n      resume_id: dbRecord.id,\n      user_id: dbRecord.user_id,\n      file_url: dbRecord.file_url,\n      file_name: dbRecord.file_name,\n      processing_method: 'ocr_space_base64',\n      ocr_success: true\n    }\n  }\n];"
      },
      "id": "process-ocr",
      "name": "Process OCR Results",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -896,
        128
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.openai.com/v1/chat/completions",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer 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"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"model\": \"gpt-4\",\n  \"messages\": [\n    {\n      \"role\": \"system\",\n      \"content\": \"You are a resume parsing AI. Extract structured information from the provided resume text and return a JSON object with the following fields:\\n\\n- personal_info: {name, email, phone, location, linkedin, portfolio}\\n- education: [{degree, institution, year, gpa, relevant_courses}]\\n- experience: [{title, company, duration, responsibilities, achievements}]\\n- skills: {technical_skills, soft_skills, tools_and_technologies}\\n- projects: [{name, description, technologies, duration, achievements}]\\n- certifications: [{name, issuer, date, validity}]\\n- achievements: [string array]\\n- languages: [{language, proficiency}]\\n\\nOnly return valid JSON. If any section is not found, use empty arrays or null values.\"\n    },\n    {\n      \"role\": \"user\",\n      \"content\": \"Please parse this resume text and extract structured information:\\n\\n{{ $('Process OCR Results').first().json.extracted_text }}\"\n    }\n  ]\n}",
        "options": {}
      },
      "id": "ai-resume-analysis",
      "name": "AI Resume Analysis",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -672,
        128
      ]
    },
    {
      "parameters": {
        "method": "PATCH",
        "url": "=https://sahcdkgvmvjzvvuzyilp.supabase.co/rest/v1/resumes?id=eq.{{ $json.resume_id }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "apikey",
              "value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InNhaGNka2d2bXZqenZ2dXp5aWxwIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTc0NTE0MDQsImV4cCI6MjA3MzAyNzQwNH0.qqnJLTmd5a0JKUhfW8fm5W9cuN_lK3czdvnszJxdrWA"
            },
            {
              "name": "Authorization",
              "value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InNhaGNka2d2bXZqenZ2dXp5aWxwIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1NzQ1MTQwNCwiZXhwIjoyMDczMDI3NDA0fQ.hjqmoB1gGYoULNGPjEe5i988iUoeQkkxPNq1FFL5Ljk"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"extracted_data\": {{ JSON.stringify($json.extracted_data) }},\n  \"parsing_status\": \"completed\",\n  \"updated_at\": \"{{ new Date().toISOString() }}\"\n}",
        "options": {}
      },
      "id": "update-resume-success",
      "name": "Update Resume Success",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -352,
        16
      ]
    },
    {
      "parameters": {
        "method": "PATCH",
        "url": "=https://sahcdkgvmvjzvvuzyilp.supabase.co/rest/v1/resumes?id=eq.{{ $json.resume_id }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "apikey",
              "value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InNhaGNka2d2bXZqenZ2dXp5aWxwIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTc0NTE0MDQsImV4cCI6MjA3MzAyNzQwNH0.qqnJLTmd5a0JKUhfW8fm5W9cuN_lK3czdvnszJxdrWA"
            },
            {
              "name": "Authorization",
              "value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InNhaGNka2d2bXZqenZ2dXp5aWxwIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1NzQ1MTQwNCwiZXhwIjoyMDczMDI3NDA0fQ.hjqmoB1gGYoULNGPjEe5i988iUoeQkkxPNq1FFL5Ljk"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"parsing_status\": \"failed\",\n  \"parsing_error\": \"{{ $json.error }}\",\n  \"updated_at\": \"{{ new Date().toISOString() }}\"\n}",
        "options": {}
      },
      "id": "update-resume-error",
      "name": "Update Resume Error",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -352,
        224
      ]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={\n  \"success\": {{ $json.success }},\n  \"resume_id\": \"{{ $json.resume_id }}\",\n  \"message\": \"{{ $json.success ? 'Resume parsed successfully' : 'Resume parsing failed' }}\",\n  \"page_count\": {{ $json.extracted_data ? $json.extracted_data.page_count : 0 }},\n  \"file_name\": \"{{ $json.extracted_data ? $json.extracted_data.file_name : '' }}\"\n}",
        "options": {
          "responseCode": 200,
          "responseHeaders": {
            "entries": [
              {
                "name": "Access-Control-Allow-Origin",
                "value": "*"
              },
              {
                "name": "Access-Control-Allow-Methods",
                "value": "POST, OPTIONS"
              },
              {
                "name": "Access-Control-Allow-Headers",
                "value": "Content-Type"
              }
            ]
          }
        }
      },
      "id": "webhook-response",
      "name": "Webhook Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        -128,
        128
      ]
    }
  ],
  "connections": {
    "Resume Parser Webhook": {
      "main": [
        [
          {
            "node": "Validate Input",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Validate Input": {
      "main": [
        [
          {
            "node": "Update Resume Status",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update Resume Status": {
      "main": [
        [
          {
            "node": "OCR.space",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OCR.space": {
      "main": [
        [
          {
            "node": "Process OCR Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process OCR Results": {
      "main": [
        [
          {
            "node": "AI Resume Analysis",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Resume Analysis": {
      "main": [
        [
          {
            "node": "Validate Extracted Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Validate Extracted Data": {
      "main": [
        [
          {
            "node": "Update Resume Success",
            "type": "main",
            "index": 0
          },
          {
            "node": "Update Resume Error",
            "type": "main",
            "index": 0
          },
          {
            "node": "Webhook Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update Resume Success": {
      "main": [
        [
          {
            "node": "Webhook Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update Resume Error": {
      "main": [
        [
          {
            "node": "Webhook Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "meta": {
    "instanceId": "dd84ddb461bd7350e2f644a1cd58b83c9a6031a36291a13a1fef0ba9e564fd3c"
  }
}